import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
import tensorflow as tf

##Use pandas read_csv to load the dataset
data=pd.read_csv('cal_housing_clean.csv')

#Check the features of the data
data.columns()

##Capture features expect the label
X=data.drop('medianHouseValue',axis=1)
#label will be the medianHouseValue
y=data['medianHouseValue']

##Split the data into training and test such in the ratio of 7:3
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=42)

##Scale the Feature Data
minmax=MinMaxScaler()

##Fit the training data only
minmax.fit(X_train,y_train)

X_train=pd.DataFrame(data=minmax.transform(X_train), columns=X_train.columns,index=X_train.index)
                     
X_test=pd.DataFrame(data=minmax.transform(X_test),columns=X_test.columns,index=X_test.index)

##Create Feature Columns

age=tf.feature_column.numeric_column('housingMedianAge')
rooms=tf.feature_column.numeric_column('totalRooms')
bedrooms=tf.feature_column.numeric_column('totalBedrooms')
population=tf.feature_column.numeric_column('population')
households=tf.feature_column.numeric_column('households')
income=tf.feature_column.numeric_column('medianIncome')

##Put them together
feat_cols={age,rooms,bedrooms,population,households,income}

##Create a input function wih batch size, epochs
input_func=tf.estimator.inputs.pandas_input_fn(x=X_train,y=y_train,batch_size=10,num_epochs=1000,shuffle=True)

##Create a model with 4 hidden layers with 3 neurons on each of them
model=tf.estimator.DNNRegressor(hidden_units=[3,3,3,3],feature_columns=feat_cols)
model.train(input_fn=input_func,steps=30000)

predict=tf.estimator.inputs.pandas_input_fn(x=X_test,batch_size=10,num_epochs=1,shuffle=False)
pred=model.predict(predict)
predictions=list(pred)

final_preds=[]
for pre in predictions:
    final_preds.append(pre['predictions'])

##check the values of predicted prices
final_preds

mean_squared_error(y_test,final_preds)**0.5

